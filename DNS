https://linuxaria.com/pills/dig-linux-dns-lookup-utility-cheat-sheet
https://pentestlab.blog/2012/11/13/dns-reconnaissance-dnsrecon/
https://resources.infosecinstitute.com/dns-hacking/

An interesting small and quick, cheat sheet for the command dig found on http://www.hackersgarage.com/

Dig – Domain Information Groper is a light weight Linux utility for querying DNS records. It is widely used to diagnose DNS servers, troubleshoot DNS servers, purge DNS Cache using external DNS server and dozen of great features it provides.

Here i am sharing quick cheat sheet of dig – DNS Lookup utility that every System/Network administrator should have print out at their desk.

In these examples, 8.8.8.8 is a Google Public DNS Server that you can use in /etc/resolv.conf




Why to use Google Public DNS ?

If you have a DNS record with high ttl e.g 3600 seconds, your local DNS server may not purge the old record from the cache. So better you use Google public DNS server to resolve it most recent update record.



You may also be interested to read about namebench – DNS benchmarking utility from Google

To set google public dns as default resolver, run below command;

NOTE : This will override your resolv.conf

echo “nameserver 8.8.8.8” > /etc/resolv.conf

Lookup different DNS records type using ‘dig’ :

Sample usage :

dig @dns-server example.com record-type

dig @8.8.8.8 hackersgarage.com A

Simple lookup :
dig hackersgarage.com

Lookup Name Servers
dig @8.8.8.8 hackersgarage.com NS

Lookup using external DNS Server.
dig @8.8.8.8 hackersgarage.com

Lookup MX record
dig @8.8.8.8 hackersgarage.com MX

Lookup CNAME record
dig @8.8.8.8 hackersgarage.com CNAME

Look TXT record (e.g will it will return SPF records, google verification methods)
dig @8.8.8.8 hackersgarage.com TXT





=============================================================================================



	* Querying the domain registration information
	----------------------------------------------

	After you know the target domain name, the first thing you would want to do is query the Whois database about that domain to look for the domain registration information. The Whois database will give information about the DNS server and the contact information of a domain.

	> # whois example.com



	* Analyzing the DNS records
	---------------------------

	No.	Record type	Description
	1	SOA			This is the start of authority record.
	2	NS			This is the name server record.
	3	A			This is the IPv4 address record.
	4	MX			This is the mail exchange record.
	5	PTR			This is the pointer record.
	6	AAAA		This is the IPv6 address record.
	7	CNAME		This is the abbreviation for canonical name. It is used as an alias name for another canonical domain name.


	For example, in a penetration test engagement, the customer may ask you to find out all of the hosts and IP addresses available for their domain. The only information you have is the organization's domain name. We will look at several common tools that can help you if you encounter this situation.


		# HOST
		=======

		> # host www.example.com

		gives us

			www.example.com has address 192.0.43.10
			www.example.com has IPv6 address 2001:500:88:200::10

		To query for any records, just give the -a option to the command.

		> # host -a example.com

			Trying "example.com"
			;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 25153
			;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 2
			;; QUESTION SECTION:
			;example.com. IN ANY

			;; ANSWER SECTION:
			example.com. 3201 IN SOA dns1.icann.org.
			hostmaster.icann.org. 2012080782 7200 3600 1209600 3600
			example.com. 46840 IN NS a.iana-servers.net.
			example.com. 46840 IN NS b.iana-servers.net.
			;; ADDITIONAL SECTION:
			b.iana-servers.net. 1401 IN A 199.43.133.53
			a.iana-servers.net. 1401 IN A 199.43.132.53
			Received 170 bytes from 202.152.165.39#53 in 563 ms


		If you give the domain name as the command-line option in host, the method is called forward lookup, but if you give an IP address as the command-line option to the host command, the method is called reverse lookup.


		# HOST: DNS zone transfer
		=========================

		A DNS zone transfer is a mechanism used to replicate a DNS database from a master DNS server to another DNS server, usually called a slave DNS server.

		> # host -l example.com ns4.isp.com

		The following is the DNS zone transfer result:

			Using domain server:
			Name: ns4.isp.com
			Address: 172.16.176.22#53
			Aliases:
			example.com name server ns1.isp.com.
			example.com name server ns2.isp.com.
			example.com has address 192.168.1.1
			smtp.example.com has address 192.168.1.2
			mail.example.com has address 192.168.1.3
			webmail.example.com has address 192.168.1.3
			www.example.com has address 192.168.1.4



		# DIG
		=====
		A DIG cheat sheet: https://www.rootusers.com/12-dig-command-examples-to-query-dns-in-linux/

		The advantages of dig compared to host are its flexibility and clarity of output.
		Without giving any options besides the domain name, the dig command will only return the A record of a domain. To request for any other DNS record type, we can give the type option in the command line:

		> # dig example.com any

			; <<>> DiG 9.7.0-P1 <<>> example.com any
			;; global options: +cmd
			;; Got answer:
			;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 40971
			;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 2

			;; QUESTION SECTION:
			;example.com. IN ANY

			;; ANSWER SECTION:
			example.com. 3565 IN SOA dns1.icann.org.
			hostmaster.icann.org. 2012080782 7200 3600 1209600 3600
			example.com. 83186 IN AAAA 2001:500:88:200::10
			example.com. 48296 IN NS b.iana-servers.net.
			example.com. 48296 IN NS a.iana-servers.net.

			;; ADDITIONAL SECTION:
			a.iana-servers.net. 182 IN A 199.43.132.53
			b.iana-servers.net. 182 IN A 199.43.133.53

			;; Query time: 327 msec
			;; SERVER: 202.152.165.39#53(202.152.165.39)
			;; WHEN: Sat Aug 18 10:46:09 2012
			;; MSG SIZE rcvd: 198


		# DIG DNS zone transfer
		=======================

		We must set the authoritative DNS server for that domain and set axfr as the type:

		> # dig @ns4.isp.com example.com axfr

			; <<>> DiG 9.7.0-P1 <<>> @ns4.isp.com example.com axfr
			; (1 server found)
			;; global options: +cmd
			example.com. 3600 IN SOA ns1.isp.com. hostmaster.
			isp.com. 2011020409 900 600 86400 3600
			example.com. 3600 IN NS ns1.isp.com.
			example.com. 3600 IN NS ns4.isp.com.
			example.com. 3600 IN A 192.168.1.1
			example.com. 3600 IN MX 192.168.1.3
			mail.example.com. 3600 IN A 192.168.1.3
			webmail.example.com. 3600 IN A 192.168.1.3
			www.example.com. 3600 IN A 192.168.1.4
			example.com. 3600 IN SOA ns1.isp.com. hostmaster.
			isp.com. 2011020409 900 600 86400 3600
			;; Query time: 855 msec
			;; SERVER: 172.16.176.22#53 (172.16.176.22)
			;; WHEN: Sat Aug 18 10:59:11 2012
			;; XFR size: 9 records



		# DNSENUM
		=========

		With dnsenum we can gather
			• The host IP addresses
			• The DNS server of a domain
			• The MX record of a domain
			• Get additional names and subdomains utilizing the Google search engine.
			• Find out subdomain names by brute forcing the names from the text files. The dnsenum tool included in Kali Linux comes with a dns.txt dictionary file that contains 1,480 subdomain names and a dns-big.txt file, which contains 266,930 subdomain names.
			• Carry out Whois queries on C-class domain network ranges and calculate its network ranges.
			• Carry out reverse lookup on network ranges.
			• Use threads to process different queries.


		> # dnsenum example.com

			dnsenum.pl example.com
			dnsenum.pl VERSION:1.2.2
			----- example.com -----
			Host's addresses:

			__________________
			Name Servers:

			______________
			ns1.isp.com 10771 IN A 172.168.1.2
			ns0.isp.com 7141 IN A 172.168.1.1
			Mail (MX) Servers:

			___________________
			hermes1.example.com 86400 IN A 192.168.10.3
			hermes.example.com 3600 IN A 192.168.10.2
			Trying Zone Transfers and getting Bind Versions:

			_________________________________________________
			Trying Zone Transfer for example.com on ns0.isp.com ...
			AXFR record query failed: NOERROR
			ns0.isp.com Bind Version:
			DNS server

			Trying Zone Transfer for example.com on ns1.isp.com ...
			example.com 86400 IN SOA
			example.com 86400 IN NS
			example.com 86400 IN MX
			example.com 86400 IN TXT
			admin.example.com 3600 IN NS
			blogs.example.com 3600 IN NS
			ftp.example.com 3600 IN A 192.168.10.4
			hermes.example.com 3600 IN A 192.168.10.2
			hermes.example.com 86400 IN TXT
			hermes.example.com 86400 IN SPF
			hermes1.example.com 86400 IN A 192.168.10.2
			www.example.com 3600 IN NS
			ns1.isp.com Bind Version:
			DNS server
			brute force file not specified, bay.


		# DNSDICT6
		==========

		Enumerate subdomains in IPv6


		# FIERCE
		========

		The fierce tool is a DNS enumeration tool that uses several techniques to find all of the IP addresses and hostnames of a target. It works by first querying your system's DNS server for the target DNS server; next, it uses the target DNS server. It also supports the wordlist supplied by the user to find subdomain names. It does this recursively until all of the wordlist items are tested. The main feature of fierce is that it can be used to locate noncontiguous IP space and hostnames against specified domains.

		> # fierce -dns example.com -threads 3

			DNS Servers for targetdomain.com:
				ns4.example.com
				ns1.example.com
				ns2.example.com
				ns3.example.com

			Trying zone transfer first...
				Testing ns4.example.com
					Request timed out or transfer not allowed.
				Testing ns1.example.com
					Request timed out or transfer not allowed.
				Testing ns2.example.com
					Request timed out or transfer not allowed.
				Testing ns3.example.com
					Request timed out or transfer not allowed.

			Unsuccessful in zone transfer (it was worth a shot)
			Okay, trying the good old fashioned way... brute force
			Checking for wildcard DNS...
			Nope. Good.
			Now performing 1895 test(s)...
			192.168.116.3 voips.example.com
			192.168.116.7 ns.example.com
			192.168.116.19 streaming.example.com
			192.168.117.50 dev.example.com
			192.168.117.16 mx1.example.com
			192.168.117.17 mx2.example.com
			192.168.117.18 mx3.example.com
			192.168.117.16 imap.example.com
			192.168.117.5 www.example.com
			192.168.117.6 intra.example.com
			192.168.117.17 mail.example.com
			192.168.117.5 web.example.com
			192.168.117.16 webmail.example.com

			Subnets found (may want to probe here using nmap or unicornscan):
				192.168.73.0-255 : 2 hostnames found.
				192.168.46.0-255 : 1 hostnames found.
				192.168.116.0-255 : 34 hostnames found.
				192.168.117.0-255 : 25 hostnames found.

			Done with Fierce scan: http://ha.ckers.org/fierce/


		# DMITRY
		========

		All-in-one information gathering tool.

		• The Whois record of a host by using the IP address or domain name
		• Host information from Netcraft.com
		• Subdomains in the target domain
		• The e-mail address of the target domain
		• Open, filtered, or closed port lists on the target machine by performing a port scan

		> # dmitry -iwnse targethost

			Deepmagic Information Gathering Tool
			"There be some deep magic going on"

			HostIP:192.168.xx.xx
			HostName:targethost

			Gathered Netcraft information for targethost
			---------------------------------
			Retrieving Netcraft.com information for targethost
			No uptime reports available for host: targethost
			Gathered Subdomain information for targethost
			---------------------------------
			Searching Google.com:80...
			HostName:targethost
			HostIP:192.168.xx.xx
			HostName:www.ecom.targethost
			HostIP:192.168.xx.xx
			HostName:blogs.targethost
			HostIP:192.168.xx.xx
			HostName:static.targethost
			HostIP:192.168.xx.xx
			HostName:webmail.targethost
			HostIP:192.168.xx.xx
			...
			Gathered E-Mail information for targethost
			---------------------------------
			Found 0 E-Mail(s) for host targethost, Searched 0 pages containing 0 results
