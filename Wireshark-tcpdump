Wireshark
=========

Difference between Capture filter and Display filter:

- Display filters (like tcp port 80) are not to be confused with display filters (like tcp.port == 80). The former are much more limited and are used to reduce the size  of a raw packet capture. The latter are used to hide some packets from the packet list.
- Capture filters are set before starting a packet capture and cannot be modified during the capture. Display filters on the other hand do not have this limitation and you can change them on the fly.

Capture filters example:

1 – host 172.18.5.4 [Capture only traffic to or from IP address]
2 – net 192.168.0.0/24  or src net 192.168.0.0/24 or dst net 192.168.0.0/24 [ Capture traffic to or from a range of IP addresses]
3 – port 53 [Capture only DNS (port 53) traffic]
4 – host www.example.com and not (port 80 or port 25) [Capture non-HTTP and non-SMTP traffic on your server (both are equivalent)]
5 – port not 53 and not arp [Capture except all ARP and DNS traffic]
6 – (tcp[0:2] > 1500 and tcp[0:2] < 1550) or (tcp[2:2] > 1500 and tcp[2:2] < 1550) [Capture traffic within a range of ports]

Display  filters example:

1 – ip.addr == 10.0.0.1 [Sets a filter for any packet with 10.0.0.1, as either the source or dest]
2 – ip.addr==10.0.0.1  && ip.addr==10.0.0.2 [sets a conversation filter between the two defined IP addresses]
3 – http or dns  [sets a filter to display all http and dns]
4 – tcp.port==4000  [sets a filter for any TCP packet with 4000 as a source or dest port]
5 – tcp.flags.reset==1  [displays all TCP resets]
6 – http.request [displays all HTTP GET requests]
7 – tcp contains traffic [displays all TCP packets that contain the word ‘traffic’. Excellent when searching on a specific string or user ID]
8 – !(arp or icmp or dns) [masks out arp, icmp, dns, or whatever other protocols may be background noise. Allowing you to focus on the traffic of interest]
9 – udp contains 33:27:58 [sets a filter for the HEX values of 0x33 0x27 0x58 at any offset]
10 – tcp.analysis.retransmission [displays all retransmissions in the trace. Helps when tracking down slow application performance and packet loss]
11 – http.user_agent contains Firefox [find user agents]
12 – tcp.port 80 && ip.addr == 192.168.1.2 [filter on port and address]
13 – http.request or http.response [Filter for http get and responses]
14 – frame contains “(attachment|tar|exe|zip|pdf)” [ Find executable or other file types]





tcpdump
=======
Capturing TCP traffic from a particular source and port:

    root@kali:~# tcpdump -ni eth0 host 192.168.0.110  | grep 443


Capturing TCP traffic and saving to a .pcap file:
-------------------------------------------------
Again I sent another file using ncat.

Server:

    root@jp_ubuntu:/# ncat -lvp 4444 > receive_file.txt
    Listening on [0.0.0.0] (family 0, port 4444)
    Connection from 192.168.0.109 59528 received!

Listener:

    root@kali:~# ncat -nv 192.168.0.110 4444 < /root/send_file.txt
    Ncat: Version 7.70 ( https://nmap.org/ncat )
    Ncat: Connected to 192.168.0.110:4444.
    Ncat: 22 bytes sent, 0 bytes received in 0.06 seconds.

Captured the traffic and saved to a .pcap file:

    root@kali:~# tcpdump -w cap01.pcap -n host 192.168.0.252 | grep 80
    tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
    ^C8 packets captured
    8 packets received by filter
    0 packets dropped by kernel

I will just put here the part that matters which is the actual content of the file. We need to read the file in hex format to be able to see it.

    root@kali:~# tcpdump -nX -r cap01.pcap

3:58:49.539543 IP 192.168.0.109.43842 > 192.168.0.252.80: Flags [P.], seq 1:107, ack 1, win 229, options [nop,nop,TS val 3829169998 ecr 1678035022], length 106: HTTP
0x0000:  4500 009e ae37 4000 4006 0969 c0a8 006d  E….7@.@..i…m
0x0010:  c0a8 00fc ab42 0050 1019 f822 8e9e e902  …..B.P…”….
0x0020:  8018 00e5 834a 0000 0101 080a e43c 7f4e  …..J…….<.N
0x0030:  6404 c84e 5468 6973 2069 7320 7468 6520  d..NThis.is.the.
0x0040:  636f 6e74 656e 7420 6f66 2074 6865 2066  content.of.the.f
0x0050:  696c 6520 7468 6174 2073 686f 756c 6420  ile.that.should.
0x0060:  6265 2073 686f 776e 2069 6e20 7468 6520  be.shown.in.the.
0x0070:  7061 636b 6574 2063 6170 7475 7265 206f  packet.capture.o
0x0080:  6e63 6520 7765 2072 6561 6420 696e 2069  nce.we.read.in.i
0x0090:  7420 4845 5820 666f 726d 6174 2e0a       t.HEX.format..
